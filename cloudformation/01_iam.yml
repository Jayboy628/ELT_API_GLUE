Parameters:
  Environment:
    Type: String
    Default: dev
  Prefix:
    Type: String
    Default: lead
  ExistingBucketName:
    Type: String
    Default: ""     # if non-empty, we will NOT create a bucket

Conditions:
  CreateBucket: !Equals [ !Ref ExistingBucketName, "" ]

Resources:
  LOADBucket:
    Condition: CreateBucket
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      BucketName: !Sub "${Prefix}-elt-${AWS::AccountId}-${Environment}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault: { SSEAlgorithm: AES256 }

  GlueJobAccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub "${Prefix}-glue-job-inline-${Environment}"
      Roles: [ !Ref GlueJobRole ]
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: S3BucketLevel
            Effect: Allow
            Action: [ "s3:ListBucket", "s3:GetBucketLocation" ]
            Resource:
              !Join ["", ["arn:aws:s3:::", !If [CreateBucket, !Ref LOADBucket, !Ref ExistingBucketName ]]]
          - Sid: S3ObjectLevel
            Effect: Allow
            Action:
              - s3:GetObject
              - s3:PutObject
              - s3:AbortMultipartUpload
              - s3:ListBucketMultipartUploads
              - s3:ListMultipartUploadParts
            Resource:
              !Join ["", [
                "arn:aws:s3:::",
                !If [CreateBucket, !Ref LOADBucket, !Ref ExistingBucketName ],
                "/*"
              ]]

Outputs:
  LOADBucketName:
    Value: !If [CreateBucket, !Ref LOADBucket, !Ref ExistingBucketName]
    Export:
      Name: !Sub "${AWS::StackName}-LOADBucketName"
